@* File: Views/Stock/History.cshtml
   Purpose: Transaction history table with optional barcode filter.
   i18n: Uses IViewLocalizer with Resources/Views/Stock/History.{culture}.resx
*@
@using InventorySystem.Models
@model IEnumerable<StockTransaction>
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["PageTitle"];
    var items = Model ?? Enumerable.Empty<StockTransaction>();
    string bc = ViewBag.Barcode as string ?? "";
}

<h2>@Localizer["PageTitle"]</h2>

<form method="get" class="d-flex gap-2 mb-3">
    <input name="barcode" class="form-control" placeholder="@Localizer["ThBarcode"]…" value="@bc" />
    <button type="submit" class="btn btn-primary">@Localizer["Filter"]</button>
    <a asp-action="History" class="btn btn-outline-secondary">@Localizer["Clear"]</a>
</form>

<table class="table table-striped table-hover align-middle">
    <thead>
        <tr>
            <th>@Localizer["ThId"]</th>
            <th>@Localizer["ThBarcode"]</th>
            <th>@Localizer["ThType"]</th>
            <th>@Localizer["ThQty"]</th>
            <th>@Localizer["ThDeliveredBy"]</th>
            <th>@Localizer["ThNote"]</th>
            <th>@Localizer["ThDate"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in items)
        {
            var rowClass = t.Type == TransactionType.Exit
            ? Localizer["RowClassExit"].Value   // e.g., "table-warning"
            : Localizer["RowClassEntry"].Value; // e.g., "table-light"

            <tr class="@rowClass">
                <td>@t.Id</td>
                <td>@t.Barcode</td>
                <td>@t.Type</td>
                <td>@t.Quantity</td>
                <td>@(t.DeliveredBy ?? "-")</td>
                <td>@(t.Note ?? "-")</td>
                <td>@t.TransactionDate.ToString("g")</td>
            </tr>
        }
    </tbody>
</table>
